generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model chai_location {
  id              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String       @db.VarChar(255)
  address         String       @db.VarChar(255)
  latitude        Float        @db.Real
  longitude       Float        @db.Real
  rating          Float        @db.Real
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  review          review[]
}

model organization {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description   String?         @db.VarChar(255)
  image         String?         @db.VarChar(255)
  name          String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  user_id       String          @db.Uuid
  tenant_id     String          @db.VarChar(255)
  chai_location chai_location[]
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model review {
  id               String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  rating           Int
  comment          String?       @db.VarChar(255)
  user_id          String        @db.Uuid
  chai_location_id String        @db.Uuid
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  chai_location    chai_location @relation(fields: [chai_location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
  review       review[]
}
